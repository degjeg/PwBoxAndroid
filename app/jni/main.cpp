//
// Created by danger on 16/9/18.
//

#include "android/log.h"
#include "includes/Log.h"
#include "jni_tool.h"
#include "stdio.h"
#include "encrypt.h"
#include "constants.h"

/* DO NOT EDIT THIS FILE - it is machine generated */
#include <jni.h>

/* Header for class com_pw_box_core_K */



#ifdef __cplusplus
extern "C" {
#endif

void verifySign(JNIEnv *env, jobject obj);

jbyteArray k1(JNIEnv *env, jclass);
jbyteArray k2(JNIEnv *env, jclass);
jbyteArray r1(JNIEnv *env, jclass);
jbyteArray r2(JNIEnv *env, jclass);
//注册native方法
static JNINativeMethod gMethods[] = {
        {k1_,  ___B_, (jbyteArray *) k1},//对应java中的public native void verifySign();
        {k2_,  ___B_, (jbyteArray *) k2},//对应java中的public native void verifySign();
        {"r1", ___B_, (jbyteArray *) r1},//对应java中的public native void verifySign();
        {"r2", ___B_, (jbyteArray *) r2},//对应java中的public native void verifySign();
        //{"r",  "()Ljava/lang/Object;", (jobject *) r},
};

//注册类
static int registerNatives(JNIEnv *env) {
    const char *kClassName = com_pw_box_core_K_;


    // gMethods[0].name = decrypt(k1_, sizeof(k1_) - 1, 100);
    // gMethods[0].signature = decrypt(___B_, sizeof(___B_) - 1, 100);

    return registerNativeMethods(env, kClassName, gMethods, sizeof(gMethods) / sizeof(gMethods[0]));

}

JNIEXPORT jint JNICALL JNI_OnLoad(JavaVM *vm, void *reserved) {
    JNIEnv *env = NULL;
    jint result = -1;


    decryptAll();
    if (vm->GetEnv((void **) &env, JNI_VERSION_1_4) != JNI_OK) {
        return -1;
    }



    if (!registerNatives(env)) {//注册

        return -1;
    }
    //成功
    result = JNI_VERSION_1_4;

    testEncrypt();
    verifySign(env, NULL);

    return result;
}

/*
 * Class:     com_pw_box_core_K
 * Method:    i
 * Signature: (Ljava/lang/Object;)V
 */
JNIEXPORT void JNICALL Java_com_pw_box_core_K_i
        (JNIEnv *, jclass, jobject) {


}

/*
 * Class:     com_pw_box_core_K
 * Method:    k1
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_pw_box_core_K_k1
        (JNIEnv *, jclass) {

    return 0;

}

/*
 * Class:     com_pw_box_core_K
 * Method:    k2
 * Signature: ()[B
 */
JNIEXPORT jbyteArray JNICALL Java_com_pw_box_core_K_k2
        (JNIEnv *, jclass) {
    return 0;
}

/*
 * Class:     com_pw_box_core_K
 * Method:    r
 * Signature: ()Ljava/security/interfaces/RSAPublicKey;
 */
JNIEXPORT jobject JNICALL Java_com_pw_box_core_K_r
        (JNIEnv *, jclass) {

    return 0;
}

// byte[] KEY1 = {20, -8, -69, -78, -14, 32, 6, -54, -118, 93, 87, 28, 79, 124, 121, -123};
// byte[] KEY2 = {93, 41, 93, -117, -104, -30, -97, 125, 14, -25, 65, -121, -113, 115, -81, -127};
// String m = "96856413182993009590488888399203430202842011410224517752933092337392240335030069900429613456167932606344833035070753446362251268902565023189398939784993712779325878251362176778080179340561374062904415988311714095450178565019065030613734958537288156992539207703570980499496632254807805030751484569327839601701";
// String public_exponent = "65537";



extern char rawk1[];
extern char rawk2[];
extern char rawm1[];
extern char rawp1[];
int len1();
int len2();
int len3();
int len4();
jbyteArray k1(JNIEnv *env, jclass) {
    return strToJByteArray(env, rawk1, len1());
}
jbyteArray k2(JNIEnv *env, jclass) {
    return strToJByteArray(env, rawk2, len2());
}

jbyteArray r1(JNIEnv *env, jclass) {
    return strToJByteArray(env, rawm1, len3());
}
jbyteArray r2(JNIEnv *env, jclass) {
    return strToJByteArray(env, rawp1, len4());
}

jobject r(JNIEnv *, jclass) {

}


#ifdef __cplusplus
}
#endif



package com.pw.box.core.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import com.pw.box.core.db.bean.OfflineItem;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "OFFLINE_ITEM".
*/
public class OfflineItemDao extends AbstractDao<OfflineItem, Long> {

    public static final String TABLENAME = "OFFLINE_ITEM";

    /**
     * Properties of entity OfflineItem.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Account = new Property(1, String.class, "account", false, "ACCOUNT");
        public final static Property Desc = new Property(2, String.class, "desc", false, "DESC");
        public final static Property Content = new Property(3, byte[].class, "content", false, "CONTENT");
        public final static Property Salt = new Property(4, byte[].class, "salt", false, "SALT");
        public final static Property HavePassword = new Property(5, Boolean.class, "havePassword", false, "have_password");
    };


    public OfflineItemDao(DaoConfig config) {
        super(config);
    }
    
    public OfflineItemDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"OFFLINE_ITEM\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"ACCOUNT\" TEXT," + // 1: account
                "\"DESC\" TEXT," + // 2: desc
                "\"CONTENT\" BLOB," + // 3: content
                "\"SALT\" BLOB," + // 4: salt
                "\"have_password\" INTEGER);"); // 5: havePassword
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"OFFLINE_ITEM\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, OfflineItem entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String account = entity.getAccount();
        if (account != null) {
            stmt.bindString(2, account);
        }
 
        String desc = entity.getDesc();
        if (desc != null) {
            stmt.bindString(3, desc);
        }
 
        byte[] content = entity.getContent();
        if (content != null) {
            stmt.bindBlob(4, content);
        }
 
        byte[] salt = entity.getSalt();
        if (salt != null) {
            stmt.bindBlob(5, salt);
        }
 
        Boolean havePassword = entity.getHavePassword();
        if (havePassword != null) {
            stmt.bindLong(6, havePassword ? 1L: 0L);
        }
    }

    /** @inheritdoc */
    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public OfflineItem readEntity(Cursor cursor, int offset) {
        OfflineItem entity = new OfflineItem( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // account
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // desc
            cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3), // content
            cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4), // salt
            cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0 // havePassword
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, OfflineItem entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setAccount(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDesc(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setContent(cursor.isNull(offset + 3) ? null : cursor.getBlob(offset + 3));
        entity.setSalt(cursor.isNull(offset + 4) ? null : cursor.getBlob(offset + 4));
        entity.setHavePassword(cursor.isNull(offset + 5) ? null : cursor.getShort(offset + 5) != 0);
     }
    
    /** @inheritdoc */
    @Override
    protected Long updateKeyAfterInsert(OfflineItem entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    /** @inheritdoc */
    @Override
    public Long getKey(OfflineItem entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

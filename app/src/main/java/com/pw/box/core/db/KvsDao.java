package com.pw.box.core.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteDatabase;
import android.database.sqlite.SQLiteStatement;

import de.greenrobot.dao.AbstractDao;
import de.greenrobot.dao.Property;
import de.greenrobot.dao.internal.DaoConfig;

import com.pw.box.core.db.bean.Kvs;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "KVS".
*/
public class KvsDao extends AbstractDao<Kvs, String> {

    public static final String TABLENAME = "KVS";

    /**
     * Properties of entity Kvs.<br/>
     * Can be used for QueryBuilder and for referencing column names.
    */
    public static class Properties {
        public final static Property K = new Property(0, String.class, "k", true, "K");
        public final static Property V = new Property(1, byte[].class, "v", false, "V");
    };


    public KvsDao(DaoConfig config) {
        super(config);
    }
    
    public KvsDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(SQLiteDatabase db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"KVS\" (" + //
                "\"K\" TEXT PRIMARY KEY NOT NULL ," + // 0: k
                "\"V\" BLOB);"); // 1: v
    }

    /** Drops the underlying database table. */
    public static void dropTable(SQLiteDatabase db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"KVS\"";
        db.execSQL(sql);
    }

    /** @inheritdoc */
    @Override
    protected void bindValues(SQLiteStatement stmt, Kvs entity) {
        stmt.clearBindings();
 
        String k = entity.getK();
        if (k != null) {
            stmt.bindString(1, k);
        }
 
        byte[] v = entity.getV();
        if (v != null) {
            stmt.bindBlob(2, v);
        }
    }

    /** @inheritdoc */
    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    /** @inheritdoc */
    @Override
    public Kvs readEntity(Cursor cursor, int offset) {
        Kvs entity = new Kvs( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // k
            cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1) // v
        );
        return entity;
    }
     
    /** @inheritdoc */
    @Override
    public void readEntity(Cursor cursor, Kvs entity, int offset) {
        entity.setK(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setV(cursor.isNull(offset + 1) ? null : cursor.getBlob(offset + 1));
     }
    
    /** @inheritdoc */
    @Override
    protected String updateKeyAfterInsert(Kvs entity, long rowId) {
        return entity.getK();
    }
    
    /** @inheritdoc */
    @Override
    public String getKey(Kvs entity) {
        if(entity != null) {
            return entity.getK();
        } else {
            return null;
        }
    }

    /** @inheritdoc */
    @Override    
    protected boolean isEntityUpdateable() {
        return true;
    }
    
}

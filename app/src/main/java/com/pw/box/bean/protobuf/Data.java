// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: pwbox.proto at 114:1
package com.pw.box.bean.protobuf;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import java.util.List;
import okio.ByteString;

public final class Data extends Message<Data, Data.Builder> {
  public static final ProtoAdapter<Data> ADAPTER = new ProtoAdapter_Data();

  private static final long serialVersionUID = 0L;

  public static final Long DEFAULT_ID = 0L;

  public static final Integer DEFAULT_TYPE = 0;

  public static final String DEFAULT_TAG = "";

  public static final String DEFAULT_SUB_TYPE = "";

  public static final Integer DEFAULT_GPID = 0;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#INT64"
  )
  public final Long id;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer type;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String tag;

  @WireField(
      tag = 4,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String sub_type;

  @WireField(
      tag = 5,
      adapter = "com.pw.box.bean.protobuf.Item#ADAPTER",
      label = WireField.Label.REPEATED
  )
  public final List<Item> items;

  @WireField(
      tag = 6,
      adapter = "com.squareup.wire.ProtoAdapter#INT32"
  )
  public final Integer gpid;

  public Data(Long id, Integer type, String tag, String sub_type, List<Item> items, Integer gpid) {
    this(id, type, tag, sub_type, items, gpid, ByteString.EMPTY);
  }

  public Data(Long id, Integer type, String tag, String sub_type, List<Item> items, Integer gpid, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.id = id;
    this.type = type;
    this.tag = tag;
    this.sub_type = sub_type;
    this.items = Internal.immutableCopyOf("items", items);
    this.gpid = gpid;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.id = id;
    builder.type = type;
    builder.tag = tag;
    builder.sub_type = sub_type;
    builder.items = Internal.copyOf("items", items);
    builder.gpid = gpid;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof Data)) return false;
    Data o = (Data) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(id, o.id)
        && Internal.equals(type, o.type)
        && Internal.equals(tag, o.tag)
        && Internal.equals(sub_type, o.sub_type)
        && items.equals(o.items)
        && Internal.equals(gpid, o.gpid);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (id != null ? id.hashCode() : 0);
      result = result * 37 + (type != null ? type.hashCode() : 0);
      result = result * 37 + (tag != null ? tag.hashCode() : 0);
      result = result * 37 + (sub_type != null ? sub_type.hashCode() : 0);
      result = result * 37 + items.hashCode();
      result = result * 37 + (gpid != null ? gpid.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (id != null) builder.append(", id=").append(id);
    if (type != null) builder.append(", type=").append(type);
    if (tag != null) builder.append(", tag=").append(tag);
    if (sub_type != null) builder.append(", sub_type=").append(sub_type);
    if (!items.isEmpty()) builder.append(", items=").append(items);
    if (gpid != null) builder.append(", gpid=").append(gpid);
    return builder.replace(0, 2, "Data{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<Data, Builder> {
    public Long id;

    public Integer type;

    public String tag;

    public String sub_type;

    public List<Item> items;

    public Integer gpid;

    public Builder() {
      items = Internal.newMutableList();
    }

    public Builder id(Long id) {
      this.id = id;
      return this;
    }

    public Builder type(Integer type) {
      this.type = type;
      return this;
    }

    public Builder tag(String tag) {
      this.tag = tag;
      return this;
    }

    public Builder sub_type(String sub_type) {
      this.sub_type = sub_type;
      return this;
    }

    public Builder items(List<Item> items) {
      Internal.checkElementsNotNull(items);
      this.items = items;
      return this;
    }

    public Builder gpid(Integer gpid) {
      this.gpid = gpid;
      return this;
    }

    @Override
    public Data build() {
      return new Data(id, type, tag, sub_type, items, gpid, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_Data extends ProtoAdapter<Data> {
    ProtoAdapter_Data() {
      super(FieldEncoding.LENGTH_DELIMITED, Data.class);
    }

    @Override
    public int encodedSize(Data value) {
      return (value.id != null ? ProtoAdapter.INT64.encodedSizeWithTag(1, value.id) : 0)
          + (value.type != null ? ProtoAdapter.INT32.encodedSizeWithTag(2, value.type) : 0)
          + (value.tag != null ? ProtoAdapter.STRING.encodedSizeWithTag(3, value.tag) : 0)
          + (value.sub_type != null ? ProtoAdapter.STRING.encodedSizeWithTag(4, value.sub_type) : 0)
          + Item.ADAPTER.asRepeated().encodedSizeWithTag(5, value.items)
          + (value.gpid != null ? ProtoAdapter.INT32.encodedSizeWithTag(6, value.gpid) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, Data value) throws IOException {
      if (value.id != null) ProtoAdapter.INT64.encodeWithTag(writer, 1, value.id);
      if (value.type != null) ProtoAdapter.INT32.encodeWithTag(writer, 2, value.type);
      if (value.tag != null) ProtoAdapter.STRING.encodeWithTag(writer, 3, value.tag);
      if (value.sub_type != null) ProtoAdapter.STRING.encodeWithTag(writer, 4, value.sub_type);
      Item.ADAPTER.asRepeated().encodeWithTag(writer, 5, value.items);
      if (value.gpid != null) ProtoAdapter.INT32.encodeWithTag(writer, 6, value.gpid);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public Data decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.id(ProtoAdapter.INT64.decode(reader)); break;
          case 2: builder.type(ProtoAdapter.INT32.decode(reader)); break;
          case 3: builder.tag(ProtoAdapter.STRING.decode(reader)); break;
          case 4: builder.sub_type(ProtoAdapter.STRING.decode(reader)); break;
          case 5: builder.items.add(Item.ADAPTER.decode(reader)); break;
          case 6: builder.gpid(ProtoAdapter.INT32.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public Data redact(Data value) {
      Builder builder = value.newBuilder();
      Internal.redactElements(builder.items, Item.ADAPTER);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}

// Code generated by Wire protocol buffer compiler, do not edit.
// Source file: pwbox.proto at 53:1
package com.pw.box.bean.protobuf;

import com.squareup.wire.FieldEncoding;
import com.squareup.wire.Message;
import com.squareup.wire.ProtoAdapter;
import com.squareup.wire.ProtoReader;
import com.squareup.wire.ProtoWriter;
import com.squareup.wire.WireField;
import com.squareup.wire.internal.Internal;
import java.io.IOException;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.StringBuilder;
import okio.ByteString;

public final class LoginReq extends Message<LoginReq, LoginReq.Builder> {
  public static final ProtoAdapter<LoginReq> ADAPTER = new ProtoAdapter_LoginReq();

  private static final long serialVersionUID = 0L;

  public static final String DEFAULT_TOKEN = "";

  public static final String DEFAULT_ACCOUNT = "";

  public static final ByteString DEFAULT_PASSWORD = ByteString.EMPTY;

  @WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String token;

  @WireField(
      tag = 2,
      adapter = "com.squareup.wire.ProtoAdapter#STRING"
  )
  public final String account;

  @WireField(
      tag = 3,
      adapter = "com.squareup.wire.ProtoAdapter#BYTES"
  )
  public final ByteString password;

  @WireField(
      tag = 4,
      adapter = "com.pw.box.bean.protobuf.DeviceInfo#ADAPTER"
  )
  public final DeviceInfo device_info;

  public LoginReq(String token, String account, ByteString password, DeviceInfo device_info) {
    this(token, account, password, device_info, ByteString.EMPTY);
  }

  public LoginReq(String token, String account, ByteString password, DeviceInfo device_info, ByteString unknownFields) {
    super(ADAPTER, unknownFields);
    this.token = token;
    this.account = account;
    this.password = password;
    this.device_info = device_info;
  }

  @Override
  public Builder newBuilder() {
    Builder builder = new Builder();
    builder.token = token;
    builder.account = account;
    builder.password = password;
    builder.device_info = device_info;
    builder.addUnknownFields(unknownFields());
    return builder;
  }

  @Override
  public boolean equals(Object other) {
    if (other == this) return true;
    if (!(other instanceof LoginReq)) return false;
    LoginReq o = (LoginReq) other;
    return unknownFields().equals(o.unknownFields())
        && Internal.equals(token, o.token)
        && Internal.equals(account, o.account)
        && Internal.equals(password, o.password)
        && Internal.equals(device_info, o.device_info);
  }

  @Override
  public int hashCode() {
    int result = super.hashCode;
    if (result == 0) {
      result = unknownFields().hashCode();
      result = result * 37 + (token != null ? token.hashCode() : 0);
      result = result * 37 + (account != null ? account.hashCode() : 0);
      result = result * 37 + (password != null ? password.hashCode() : 0);
      result = result * 37 + (device_info != null ? device_info.hashCode() : 0);
      super.hashCode = result;
    }
    return result;
  }

  @Override
  public String toString() {
    StringBuilder builder = new StringBuilder();
    if (token != null) builder.append(", token=").append(token);
    if (account != null) builder.append(", account=").append(account);
    if (password != null) builder.append(", password=").append(password);
    if (device_info != null) builder.append(", device_info=").append(device_info);
    return builder.replace(0, 2, "LoginReq{").append('}').toString();
  }

  public static final class Builder extends Message.Builder<LoginReq, Builder> {
    public String token;

    public String account;

    public ByteString password;

    public DeviceInfo device_info;

    public Builder() {
    }

    public Builder token(String token) {
      this.token = token;
      return this;
    }

    public Builder account(String account) {
      this.account = account;
      return this;
    }

    public Builder password(ByteString password) {
      this.password = password;
      return this;
    }

    public Builder device_info(DeviceInfo device_info) {
      this.device_info = device_info;
      return this;
    }

    @Override
    public LoginReq build() {
      return new LoginReq(token, account, password, device_info, super.buildUnknownFields());
    }
  }

  private static final class ProtoAdapter_LoginReq extends ProtoAdapter<LoginReq> {
    ProtoAdapter_LoginReq() {
      super(FieldEncoding.LENGTH_DELIMITED, LoginReq.class);
    }

    @Override
    public int encodedSize(LoginReq value) {
      return (value.token != null ? ProtoAdapter.STRING.encodedSizeWithTag(1, value.token) : 0)
          + (value.account != null ? ProtoAdapter.STRING.encodedSizeWithTag(2, value.account) : 0)
          + (value.password != null ? ProtoAdapter.BYTES.encodedSizeWithTag(3, value.password) : 0)
          + (value.device_info != null ? DeviceInfo.ADAPTER.encodedSizeWithTag(4, value.device_info) : 0)
          + value.unknownFields().size();
    }

    @Override
    public void encode(ProtoWriter writer, LoginReq value) throws IOException {
      if (value.token != null) ProtoAdapter.STRING.encodeWithTag(writer, 1, value.token);
      if (value.account != null) ProtoAdapter.STRING.encodeWithTag(writer, 2, value.account);
      if (value.password != null) ProtoAdapter.BYTES.encodeWithTag(writer, 3, value.password);
      if (value.device_info != null) DeviceInfo.ADAPTER.encodeWithTag(writer, 4, value.device_info);
      writer.writeBytes(value.unknownFields());
    }

    @Override
    public LoginReq decode(ProtoReader reader) throws IOException {
      Builder builder = new Builder();
      long token = reader.beginMessage();
      for (int tag; (tag = reader.nextTag()) != -1;) {
        switch (tag) {
          case 1: builder.token(ProtoAdapter.STRING.decode(reader)); break;
          case 2: builder.account(ProtoAdapter.STRING.decode(reader)); break;
          case 3: builder.password(ProtoAdapter.BYTES.decode(reader)); break;
          case 4: builder.device_info(DeviceInfo.ADAPTER.decode(reader)); break;
          default: {
            FieldEncoding fieldEncoding = reader.peekFieldEncoding();
            Object value = fieldEncoding.rawProtoAdapter().decode(reader);
            builder.addUnknownField(tag, fieldEncoding, value);
          }
        }
      }
      reader.endMessage(token);
      return builder.build();
    }

    @Override
    public LoginReq redact(LoginReq value) {
      Builder builder = value.newBuilder();
      if (builder.device_info != null) builder.device_info = DeviceInfo.ADAPTER.redact(builder.device_info);
      builder.clearUnknownFields();
      return builder.build();
    }
  }
}
